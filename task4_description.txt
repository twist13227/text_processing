Описание решения:
1) Использовал TfidfVectorizer из scikit-learn'a для препроцессинга данных. Для улучшения работы с русским текстом использовал nltk
2) Взял модельку KNeighborsRegressor из того же scikit-learn'a для кластеризации
3) Запустил с весьма дефолтными параметрами (n_neighbors=3, metric="cosine", weights="uniform")
4) Попробовал уменьшить n_neighbors. При значении 2 результат был лучше, чем при 3. При значении 1 - ещё лучше.
Но этого всё равно не хватало на бейзлайн
5) Запустил GridSearch (файл cross_val.py. Единственное отличие - запускал на KNeighborsClassifier), написанный в задании 4 (KNN) прошлогоднего курса по ML.(n_neighbors от 1 до 5,
metrics 'cosine' или 'euclidean', weights 'uniform' или 'distance'. Понял, что подобранные параметры оптимальные! Но бейзлайн не проходит!
6) Почитал, что можно сделать. Решил попробовать после predict'a на примере добавлять его в данные, на которых делается fit модели (может помочь, потому что тестировочные данные могут сильно отличаться от тренировочных, поэтому лучше, чтобы модель основывалась ещё и на новых уже обработанных данных)

Воспроизведение решения:
0) Проверить, что установлены библиотеки из условия
1) Распаковать архив (чтобы dev-dataset был в одной папке с init.py), либо просто его туда положить
2) Запустить файл init.py
3) Запустить, что нужно, с классом Solution из solution.py
